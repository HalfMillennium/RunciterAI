import { pgTable, text, serial, integer, boolean, timestamp } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
});

export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
});

export const documents = pgTable("documents", {
  id: serial("id").primaryKey(),
  title: text("title").default("Untitled"),
  content: text("content").default(""),
  lastModified: timestamp("last_modified").defaultNow(),
  userId: integer("user_id"),
});

export const insertDocumentSchema = createInsertSchema(documents).pick({
  title: true,
  content: true,
  userId: true,
});

export const suggestions = pgTable("suggestions", {
  id: serial("id").primaryKey(),
  prompt: text("prompt").notNull(),
  description: text("description").default(""),
  documentId: integer("document_id"),
  position: text("position").default("right"), // 'left' or 'right'
  generated: boolean("generated").default(false), // Whether the suggestion has been generated
  generatedContent: text("generated_content").default(""), // The content generated by the AI
});

export const insertSuggestionSchema = createInsertSchema(suggestions).pick({
  prompt: true,
  description: true,
  documentId: true,
  position: true,
});

export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;

export type InsertDocument = z.infer<typeof insertDocumentSchema>;
export type Document = typeof documents.$inferSelect;

export type InsertSuggestion = z.infer<typeof insertSuggestionSchema>;
export type Suggestion = typeof suggestions.$inferSelect;

// Model for request to generate AI content
export const generateContentSchema = z.object({
  documentContent: z.string(),
  prompt: z.string(),
});

export type GenerateContentRequest = z.infer<typeof generateContentSchema>;
